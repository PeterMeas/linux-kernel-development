From 99f617ac881b2f4b0cb113211cdf18a3a5bcacdf Mon Sep 17 00:00:00 2001
From: Peter Meas <peter_meas@fall2025-uml.kdlp.underground.software>
Date: Tue, 23 Sep 2025 20:11:44 +0000
Subject: [PATCH v5 3/4] new_syscall: Add assembly helper for kdlp syscall and
 updated test program

Signed-off-by: Peter Meas <peter_meas@fall2025-uml.kdlp.underground.software>
---
 peter_meas/new_syscall/Makefile            |  9 ++--
 peter_meas/new_syscall/assembly_output.txt | 48 ++++++++++++++++++++++
 peter_meas/new_syscall/kdlp_syscall.S      |  9 ++++
 peter_meas/new_syscall/test.c              | 20 ++++++---
 4 files changed, 77 insertions(+), 9 deletions(-)
 create mode 100644 peter_meas/new_syscall/assembly_output.txt
 create mode 100644 peter_meas/new_syscall/kdlp_syscall.S

diff --git a/peter_meas/new_syscall/Makefile b/peter_meas/new_syscall/Makefile
index e81b915..4cf0372 100644
--- a/peter_meas/new_syscall/Makefile
+++ b/peter_meas/new_syscall/Makefile
@@ -1,10 +1,13 @@
 CC := riscv64-linux-gnu-gcc
-CFLAGS := -gdwarf-5 -static-pie -fPIC --sysroot=../sysroot
+CFLAGS := -gdwarf-5 -static-pie -fPIC \
+          --sysroot=/home/peter_meas/sysroot \
+          -I/home/peter_meas/sysroot/usr/include \
+          -I/home/peter_meas/sysroot/usr/include/asm

 all: init

-init: test.c
-	$(CC) $(CFLAGS) $< -o $@
+init: test.c kdlp_syscall.S
+	$(CC) $(CFLAGS) $^ -o $@

 clean:
 	rm -f init
diff --git a/peter_meas/new_syscall/assembly_output.txt b/peter_meas/new_syscall/assembly_output.txt
new file mode 100644
index 0000000..b19e4eb
--- /dev/null
+++ b/peter_meas/new_syscall/assembly_output.txt
@@ -0,0 +1,48 @@
+Linux version 6.16.0-kdlp+ (peter_meas@kdlp) (riscv64-linux-gnu-gcc (GCC) 15.2.1 20250808 (Red Hat Cross 15.2.1-1), GNU ld version 2.44-1.fc42) #3 Tue Sep 23 20:29:37 UTC 2025
+random: crng init done
+Machine model: riscv-virtio,qemu
+OF: reserved mem: Reserved memory: No reserved-memory node in the DT
+Zone ranges:
+  DMA32    [mem 0x0000000080000000-0x0000000087ffffff]
+  Normal   empty
+Movable zone start for each node
+Early memory node ranges
+  node   0: [mem 0x0000000080000000-0x0000000087ffffff]
+Initmem setup node 0 [mem 0x0000000080000000-0x0000000087ffffff]
+riscv: base ISA extensions achim
+riscv: ELF capabilities acim
+Ticket spinlock: enabled
+Kernel command line: panic=-1
+printk: log buffer data + meta data: 131072 + 458752 = 589824 bytes
+Dentry cache hash table entries: 16384 (order: 5, 131072 bytes, linear)
+Inode-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
+Built 1 zonelists, mobility grouping on.  Total pages: 32768
+mem auto-init: stack:all(zero), heap alloc:off, heap free:off
+SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
+NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
+riscv-intc: 64 local interrupts mapped
+clint: clint@2000000: timer running at 10000000 Hz
+clocksource: clint_clocksource: mask: 0xffffffffffffffff max_cycles: 0x24e6a1710, max_idle_ns: 440795202120 ns
+sched_clock: 64 bits at 10MHz, resolution 100ns, wraps every 4398046511100ns
+Calibrating delay loop (skipped), value calculated using timer frequency.. 20.00 BogoMIPS (lpj=40000)
+pid_max: default: 32768 minimum: 301
+Mount-cache hash table entries: 512 (order: 0, 4096 bytes, linear)
+Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes, linear)
+Memory: 125316K/131072K available (1435K kernel code, 873K rwdata, 160K rodata, 343K init, 166K bss, 5396K reserved, 0K cma-reserved)
+clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
+cpu0: Ratio of byte access time to unaligned word access is 6.90, unaligned accesses are fast
+clocksource: Switched to clocksource clint_clocksource
+workingset: timestamp_bits=62 max_order=15 bucket_order=0
+riscv-plic: plic@c000000: mapped 95 interrupts with 1 handlers for 2 contexts.
+Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
+printk: legacy console [ttyS0] disabled
+10000000.serial: ttyS0 at MMIO 0x10000000 (irq = 3, base_baud = 230400) is a 16550A
+printk: legacy console [ttyS0] enabled
+Unpacking initramfs...
+Freeing initrd memory: 108K
+clk: Disabling unused clocks
+Freeing unused kernel image (initmem) memory: 340K
+This architecture does not have kernel memory protection.
+Run /init as init process
+Syscall succeeded, returned 26
+Kernel panic - not syncing: Attempted to kill init! exitcode=0x00000000
diff --git a/peter_meas/new_syscall/kdlp_syscall.S b/peter_meas/new_syscall/kdlp_syscall.S
new file mode 100644
index 0000000..0d427be
--- /dev/null
+++ b/peter_meas/new_syscall/kdlp_syscall.S
@@ -0,0 +1,9 @@
+#include <asm/unistd.h>
+
+.global kdlp
+
+#a0 is buffer and a1 is size
+kdlp:
+	li a7, __NR_kdlp		#load syscall
+	ecall			#perform syscall
+	ret			#return to C caller
diff --git a/peter_meas/new_syscall/test.c b/peter_meas/new_syscall/test.c
index ee36115..93e1825 100644
--- a/peter_meas/new_syscall/test.c
+++ b/peter_meas/new_syscall/test.c
@@ -3,19 +3,27 @@
 #include <errno.h>
 #include <string.h>
 #include <stdio.h>
+#include <linux/reboot.h>
+#include <sys/reboot.h>
+
+extern long kdlp(const char *buf, int size);

 int main(int argc, char** argv) {

 	char buff[128];
-	long numBytes;
+	long ret;

-	numBytes = syscall(__NR_kdlp, buff, sizeof(buff));
-	if (numBytes < 0) {
+	ret = kdlp(buff, sizeof(buff));
+	//ret = syscall(__NR_kdlp, buff, sizeof(buff));
+	if (ret < 0) {

-		printf("Syscall failed: %s\n", strerror(-numBytes));
-		return -numBytes;
+	//	printf("Syscall failed: %s\n", strerror(-ret));
+	//	return -ret;
+		printf("Error: syscall failed with code %ld\n", -ret);
 	} else {
-		write(1, buff, numBytes);
+		printf("Syscall succeeded, returned %ld\n", ret);
+	//	write(1, buff, ret);
 	}
+	reboot(LINUX_REBOOT_CMD_POWER_OFF);
 	return 0;
 }
--
2.51.0

