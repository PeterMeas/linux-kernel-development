From 496250a28d5078383125f631a1f599c18c41c55d Mon Sep 17 00:00:00 2001
From: Peter Meas <peter_meas@fall2025-uml.kdlp.underground.software>
Date: Wed, 22 Oct 2025 02:45:20 +0000
Subject: [RFC PATCH v1 2/2] kernel_module: patch 2 - test.c and makefile

Signed-off-by: Peter Meas <peter_meas@fall2025-uml.kdlp.underground.software>
---
 peter_meas/first_module/tests/Makefile |  0
 peter_meas/first_module/tests/test.c   | 86 ++++++++++++++++++++++++++
 2 files changed, 86 insertions(+)
 create mode 100644 peter_meas/first_module/tests/Makefile
 create mode 100644 peter_meas/first_module/tests/test.c

diff --git a/peter_meas/first_module/tests/Makefile b/peter_meas/first_module/tests/Makefile
new file mode 100644
index 0000000..e69de29
diff --git a/peter_meas/first_module/tests/test.c b/peter_meas/first_module/tests/test.c
new file mode 100644
index 0000000..21e83e0
--- /dev/null
+++ b/peter_meas/first_module/tests/test.c
@@ -0,0 +1,86 @@
+#include <stdio.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <string.h>
+#include <errno.h>
+
+#define PROC_PATH "/proc/kdlp"
+#define EXPECTED_MSG "KDLP module by Peter Meas\n"
+#define EXPECTED_LEN 26
+
+int test_num = 1;
+// helper func print TAP result
+// pass = 1 -> success
+// pass = 0 -> failure
+// description -> what test checks
+void print_test_results(int pass, const char *description) {
+	if (pass) {
+		printf("ok %d - %s\n", test_num, description);
+	} else {
+		printf("not ok %d - %s\n", test_num, description);
+	}
+	test_num++;
+}
+
+//helper func to print diagnostic info when test fail
+void print_diagnostic(const char *msg) {
+	printf("# %s\n", msg);
+}
+
+int main() {
+	
+
+	//TEST 1: check if file exist
+	struct stat file_info;
+	int result = stat(PROC_PATH, &file_info);
+	if (result == 0) {
+		print_test_results(1, "File exists");
+	} else {
+		print_test_results(0, "File does not exist" ;)
+	}
+
+	//TEST 2: Check file permissions
+	if ((file_info.st_mode & 0777) == 0444) {
+		print_test_results(1, "File is read only");
+	} else {
+		print_test_results(0, "File is not read only");
+	} 
+
+	//TEST 3: Check file ownership
+	if (file_info.st_uid == 0 && file_info.st_gid == 0) {
+		print_test_results(1, "File is owned by user root and group root");
+	} else {
+		print_test_results(0, "File is not owned by root and group root");
+	}
+	//TEST 4: Check open file for reading
+	int fd = open(PROC_PATH, O_RDONLY);
+	if (fd >= 0) {
+		print_test_results(1, "File is open for reading");
+		close(fd);
+	} else {
+		print_test_results(0, "File is not open for reading");
+	}
+	//TEST 5: Reading content and verify if match
+	int fd = open(PROC_PATH, O_RDONLY);
+	char buffer[100];
+	if (fd >= 0) {
+		int rd = read(fd, buffer, 27);
+		if (rd <= 0) {
+		print_test_results(0, "test failed");
+
+		} else {
+			if (rd == EXPECTED_LEN && memcmp(buffer, EXPECTED_MSG, EXPECTED_LEN) == 0) {
+
+	print_test_results(1, "content read and matches");
+			} else {
+		print_test_results(0, "content doesnt match");
+			}
+		}
+		close(fd);
+	}
+	
+	
+
+	return 0;
+}
-- 
2.51.0

